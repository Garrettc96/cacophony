/*
 * This file is generated by jOOQ.
 */
package com.example.cacophony.jooq.tables;

import com.example.cacophony.jooq.Cacophony;
import com.example.cacophony.jooq.Indexes;
import com.example.cacophony.jooq.Keys;
import com.example.cacophony.jooq.tables.CUser.CUserPath;
import com.example.cacophony.jooq.tables.records.ReactRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class React extends TableImpl<ReactRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>cacophony.react</code>
     */
    public static final React REACT = new React();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ReactRecord> getRecordType() {
        return ReactRecord.class;
    }

    /**
     * The column <code>cacophony.react.id</code>.
     */
    public final TableField<ReactRecord, UUID> ID = createField(DSL.name("id"),
            SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)),
            this, "");

    /**
     * The column <code>cacophony.react.user_id</code>.
     */
    public final TableField<ReactRecord, UUID> USER_ID = createField(DSL.name("user_id"),
            SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>cacophony.react.name</code>.
     */
    public final TableField<ReactRecord, String> NAME = createField(DSL.name("name"),
            SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>cacophony.react.s3_path</code>.
     */
    public final TableField<ReactRecord, String> S3_PATH = createField(DSL.name("s3_path"), SQLDataType.VARCHAR(255),
            this, "");

    /**
     * The column <code>cacophony.react.created_at</code>.
     */
    public final TableField<ReactRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"),
            SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false)
                    .defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)),
            this, "");

    /**
     * The column <code>cacophony.react.updated_at</code>.
     */
    public final TableField<ReactRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"),
            SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false)
                    .defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)),
            this, "");

    private React(Name alias, Table<ReactRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private React(Name alias, Table<ReactRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>cacophony.react</code> table reference
     */
    public React(String alias) {
        this(DSL.name(alias), REACT);
    }

    /**
     * Create an aliased <code>cacophony.react</code> table reference
     */
    public React(Name alias) {
        this(alias, REACT);
    }

    /**
     * Create a <code>cacophony.react</code> table reference
     */
    public React() {
        this(DSL.name("react"), null);
    }

    public <O extends Record> React(Table<O> path, ForeignKey<O, ReactRecord> childPath,
            InverseForeignKey<O, ReactRecord> parentPath) {
        super(path, childPath, parentPath, REACT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ReactPath extends React implements Path<ReactRecord> {

        private static final long serialVersionUID = 1L;

        public <O extends Record> ReactPath(Table<O> path, ForeignKey<O, ReactRecord> childPath,
                InverseForeignKey<O, ReactRecord> parentPath) {
            super(path, childPath, parentPath);
        }

        private ReactPath(Name alias, Table<ReactRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ReactPath as(String alias) {
            return new ReactPath(DSL.name(alias), this);
        }

        @Override
        public ReactPath as(Name alias) {
            return new ReactPath(alias, this);
        }

        @Override
        public ReactPath as(Table<?> alias) {
            return new ReactPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Cacophony.CACOPHONY;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_REACT_USER_ID);
    }

    @Override
    public UniqueKey<ReactRecord> getPrimaryKey() {
        return Keys.REACT_PKEY;
    }

    @Override
    public List<ForeignKey<ReactRecord, ?>> getReferences() {
        return Arrays.asList(Keys.REACT__FK_REACT_C_USER);
    }

    private transient CUserPath _cUser;

    /**
     * Get the implicit join path to the <code>cacophony.c_user</code> table.
     */
    public CUserPath cUser() {
        if (_cUser == null)
            _cUser = new CUserPath(this, Keys.REACT__FK_REACT_C_USER, null);

        return _cUser;
    }

    @Override
    public React as(String alias) {
        return new React(DSL.name(alias), this);
    }

    @Override
    public React as(Name alias) {
        return new React(alias, this);
    }

    @Override
    public React as(Table<?> alias) {
        return new React(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public React rename(String name) {
        return new React(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public React rename(Name name) {
        return new React(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public React rename(Table<?> name) {
        return new React(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public React where(Condition condition) {
        return new React(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public React where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public React where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public React where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public React where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public React where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public React where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public React where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public React whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public React whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
