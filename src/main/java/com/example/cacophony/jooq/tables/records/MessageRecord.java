/*
 * This file is generated by jOOQ.
 */
package com.example.cacophony.jooq.tables.records;

import com.example.cacophony.jooq.tables.Message;

import java.time.OffsetDateTime;
import java.util.UUID;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class MessageRecord extends UpdatableRecordImpl<MessageRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>cacophony.message.id</code>.
     */
    public void setId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>cacophony.message.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>cacophony.message.user_id</code>.
     */
    public void setUserId(UUID value) {
        set(1, value);
    }

    /**
     * Getter for <code>cacophony.message.user_id</code>.
     */
    public UUID getUserId() {
        return (UUID) get(1);
    }

    /**
     * Setter for <code>cacophony.message.conversation_id</code>.
     */
    public void setConversationId(UUID value) {
        set(2, value);
    }

    /**
     * Getter for <code>cacophony.message.conversation_id</code>.
     */
    public UUID getConversationId() {
        return (UUID) get(2);
    }

    /**
     * Setter for <code>cacophony.message.text</code>.
     */
    public void setText(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>cacophony.message.text</code>.
     */
    public String getText() {
        return (String) get(3);
    }

    /**
     * Setter for <code>cacophony.message.s3_path</code>.
     */
    public void setS3Path(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>cacophony.message.s3_path</code>.
     */
    public String getS3Path() {
        return (String) get(4);
    }

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code
     *             generation. If this is a built-in type, you can define an explicit {@link org.jooq.Binding} to
     *             specify how this type should be handled. Deprecation can be turned off using
     *             {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public void setFtsVector(Object value) {
        set(5, value);
    }

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code
     *             generation. If this is a built-in type, you can define an explicit {@link org.jooq.Binding} to
     *             specify how this type should be handled. Deprecation can be turned off using
     *             {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public Object getFtsVector() {
        return get(5);
    }

    /**
     * Setter for <code>cacophony.message.created_at</code>.
     */
    public void setCreatedAt(OffsetDateTime value) {
        set(6, value);
    }

    /**
     * Getter for <code>cacophony.message.created_at</code>.
     */
    public OffsetDateTime getCreatedAt() {
        return (OffsetDateTime) get(6);
    }

    /**
     * Setter for <code>cacophony.message.updated_at</code>.
     */
    public void setUpdatedAt(OffsetDateTime value) {
        set(7, value);
    }

    /**
     * Getter for <code>cacophony.message.updated_at</code>.
     */
    public OffsetDateTime getUpdatedAt() {
        return (OffsetDateTime) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached MessageRecord
     */
    public MessageRecord() {
        super(Message.MESSAGE);
    }

    /**
     * Create a detached, initialised MessageRecord
     */
    public MessageRecord(UUID id, UUID userId, UUID conversationId, String text, String s3Path, Object ftsVector,
            OffsetDateTime createdAt, OffsetDateTime updatedAt) {
        super(Message.MESSAGE);

        setId(id);
        setUserId(userId);
        setConversationId(conversationId);
        setText(text);
        setS3Path(s3Path);
        setFtsVector(ftsVector);
        setCreatedAt(createdAt);
        setUpdatedAt(updatedAt);
        resetTouchedOnNotNull();
    }
}
