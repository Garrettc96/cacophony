/*
 * This file is generated by jOOQ.
 */
package com.example.cacophony.jooq.tables;

import com.example.cacophony.jooq.Cacophony;
import com.example.cacophony.jooq.Keys;
import com.example.cacophony.jooq.tables.Channel.ChannelPath;
import com.example.cacophony.jooq.tables.records.ChannelVisibilityRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ChannelVisibility extends TableImpl<ChannelVisibilityRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>cacophony.channel_visibility</code>
     */
    public static final ChannelVisibility CHANNEL_VISIBILITY = new ChannelVisibility();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ChannelVisibilityRecord> getRecordType() {
        return ChannelVisibilityRecord.class;
    }

    /**
     * The column <code>cacophony.channel_visibility.visibility</code>.
     */
    public final TableField<ChannelVisibilityRecord, String> VISIBILITY = createField(DSL.name("visibility"),
            SQLDataType.VARCHAR(50).nullable(false), this, "");

    private ChannelVisibility(Name alias, Table<ChannelVisibilityRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ChannelVisibility(Name alias, Table<ChannelVisibilityRecord> aliased, Field<?>[] parameters,
            Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>cacophony.channel_visibility</code> table reference
     */
    public ChannelVisibility(String alias) {
        this(DSL.name(alias), CHANNEL_VISIBILITY);
    }

    /**
     * Create an aliased <code>cacophony.channel_visibility</code> table reference
     */
    public ChannelVisibility(Name alias) {
        this(alias, CHANNEL_VISIBILITY);
    }

    /**
     * Create a <code>cacophony.channel_visibility</code> table reference
     */
    public ChannelVisibility() {
        this(DSL.name("channel_visibility"), null);
    }

    public <O extends Record> ChannelVisibility(Table<O> path, ForeignKey<O, ChannelVisibilityRecord> childPath,
            InverseForeignKey<O, ChannelVisibilityRecord> parentPath) {
        super(path, childPath, parentPath, CHANNEL_VISIBILITY);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ChannelVisibilityPath extends ChannelVisibility implements Path<ChannelVisibilityRecord> {

        private static final long serialVersionUID = 1L;

        public <O extends Record> ChannelVisibilityPath(Table<O> path, ForeignKey<O, ChannelVisibilityRecord> childPath,
                InverseForeignKey<O, ChannelVisibilityRecord> parentPath) {
            super(path, childPath, parentPath);
        }

        private ChannelVisibilityPath(Name alias, Table<ChannelVisibilityRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ChannelVisibilityPath as(String alias) {
            return new ChannelVisibilityPath(DSL.name(alias), this);
        }

        @Override
        public ChannelVisibilityPath as(Name alias) {
            return new ChannelVisibilityPath(alias, this);
        }

        @Override
        public ChannelVisibilityPath as(Table<?> alias) {
            return new ChannelVisibilityPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Cacophony.CACOPHONY;
    }

    @Override
    public UniqueKey<ChannelVisibilityRecord> getPrimaryKey() {
        return Keys.CHANNEL_VISIBILITY_PKEY;
    }

    private transient ChannelPath _channel;

    /**
     * Get the implicit to-many join path to the <code>cacophony.channel</code> table
     */
    public ChannelPath channel() {
        if (_channel == null)
            _channel = new ChannelPath(this, null, Keys.CHANNEL__FK_CHANNEL_VISIBILITY.getInverseKey());

        return _channel;
    }

    @Override
    public ChannelVisibility as(String alias) {
        return new ChannelVisibility(DSL.name(alias), this);
    }

    @Override
    public ChannelVisibility as(Name alias) {
        return new ChannelVisibility(alias, this);
    }

    @Override
    public ChannelVisibility as(Table<?> alias) {
        return new ChannelVisibility(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ChannelVisibility rename(String name) {
        return new ChannelVisibility(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ChannelVisibility rename(Name name) {
        return new ChannelVisibility(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ChannelVisibility rename(Table<?> name) {
        return new ChannelVisibility(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ChannelVisibility where(Condition condition) {
        return new ChannelVisibility(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ChannelVisibility where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ChannelVisibility where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ChannelVisibility where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ChannelVisibility where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ChannelVisibility where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ChannelVisibility where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ChannelVisibility where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ChannelVisibility whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ChannelVisibility whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
