/*
 * This file is generated by jOOQ.
 */
package com.example.cacophony.jooq.tables;

import com.example.cacophony.jooq.Cacophony;
import com.example.cacophony.jooq.Indexes;
import com.example.cacophony.jooq.Keys;
import com.example.cacophony.jooq.tables.CUser.CUserPath;
import com.example.cacophony.jooq.tables.Conversation.ConversationPath;
import com.example.cacophony.jooq.tables.records.MessageRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.DefaultDataType;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Message extends TableImpl<MessageRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>cacophony.message</code>
     */
    public static final Message MESSAGE = new Message();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MessageRecord> getRecordType() {
        return MessageRecord.class;
    }

    /**
     * The column <code>cacophony.message.id</code>.
     */
    public final TableField<MessageRecord, UUID> ID = createField(DSL.name("id"),
            SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)),
            this, "");

    /**
     * The column <code>cacophony.message.user_id</code>.
     */
    public final TableField<MessageRecord, UUID> USER_ID = createField(DSL.name("user_id"),
            SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>cacophony.message.conversation_id</code>.
     */
    public final TableField<MessageRecord, UUID> CONVERSATION_ID = createField(DSL.name("conversation_id"),
            SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>cacophony.message.text</code>.
     */
    public final TableField<MessageRecord, String> TEXT = createField(DSL.name("text"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>cacophony.message.s3_path</code>.
     */
    public final TableField<MessageRecord, String> S3_PATH = createField(DSL.name("s3_path"), SQLDataType.VARCHAR(255),
            this, "");

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code
     *             generation. If this is a built-in type, you can define an explicit {@link org.jooq.Binding} to
     *             specify how this type should be handled. Deprecation can be turned off using
     *             {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public final TableField<MessageRecord, Object> FTS_VECTOR = createField(DSL.name("fts_vector"),
            DefaultDataType.getDefaultDataType("\"pg_catalog\".\"tsvector\""), this, "");

    /**
     * The column <code>cacophony.message.created_at</code>.
     */
    public final TableField<MessageRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"),
            SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false)
                    .defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)),
            this, "");

    /**
     * The column <code>cacophony.message.updated_at</code>.
     */
    public final TableField<MessageRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"),
            SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false)
                    .defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)),
            this, "");

    private Message(Name alias, Table<MessageRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Message(Name alias, Table<MessageRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>cacophony.message</code> table reference
     */
    public Message(String alias) {
        this(DSL.name(alias), MESSAGE);
    }

    /**
     * Create an aliased <code>cacophony.message</code> table reference
     */
    public Message(Name alias) {
        this(alias, MESSAGE);
    }

    /**
     * Create a <code>cacophony.message</code> table reference
     */
    public Message() {
        this(DSL.name("message"), null);
    }

    public <O extends Record> Message(Table<O> path, ForeignKey<O, MessageRecord> childPath,
            InverseForeignKey<O, MessageRecord> parentPath) {
        super(path, childPath, parentPath, MESSAGE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class MessagePath extends Message implements Path<MessageRecord> {

        private static final long serialVersionUID = 1L;

        public <O extends Record> MessagePath(Table<O> path, ForeignKey<O, MessageRecord> childPath,
                InverseForeignKey<O, MessageRecord> parentPath) {
            super(path, childPath, parentPath);
        }

        private MessagePath(Name alias, Table<MessageRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public MessagePath as(String alias) {
            return new MessagePath(DSL.name(alias), this);
        }

        @Override
        public MessagePath as(Name alias) {
            return new MessagePath(alias, this);
        }

        @Override
        public MessagePath as(Table<?> alias) {
            return new MessagePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Cacophony.CACOPHONY;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_MESSAGE_CONVERSATION_ID, Indexes.IDX_MESSAGE_FTS_VECTOR,
                Indexes.IDX_MESSAGE_USER_ID);
    }

    @Override
    public UniqueKey<MessageRecord> getPrimaryKey() {
        return Keys.MESSAGE_PKEY;
    }

    @Override
    public List<ForeignKey<MessageRecord, ?>> getReferences() {
        return Arrays.asList(Keys.MESSAGE__FK_MESSAGE_C_USER, Keys.MESSAGE__FK_MESSAGE_CONVERSATION);
    }

    private transient CUserPath _cUser;

    /**
     * Get the implicit join path to the <code>cacophony.c_user</code> table.
     */
    public CUserPath cUser() {
        if (_cUser == null)
            _cUser = new CUserPath(this, Keys.MESSAGE__FK_MESSAGE_C_USER, null);

        return _cUser;
    }

    private transient ConversationPath _conversation;

    /**
     * Get the implicit join path to the <code>cacophony.conversation</code> table.
     */
    public ConversationPath conversation() {
        if (_conversation == null)
            _conversation = new ConversationPath(this, Keys.MESSAGE__FK_MESSAGE_CONVERSATION, null);

        return _conversation;
    }

    @Override
    public Message as(String alias) {
        return new Message(DSL.name(alias), this);
    }

    @Override
    public Message as(Name alias) {
        return new Message(alias, this);
    }

    @Override
    public Message as(Table<?> alias) {
        return new Message(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Message rename(String name) {
        return new Message(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Message rename(Name name) {
        return new Message(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Message rename(Table<?> name) {
        return new Message(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Message where(Condition condition) {
        return new Message(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Message where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Message where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Message where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Message where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Message where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Message where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Message where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Message whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Message whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
