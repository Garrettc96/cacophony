/*
 * This file is generated by jOOQ.
 */
package com.example.cacophony.jooq.tables;

import com.example.cacophony.jooq.Cacophony;
import com.example.cacophony.jooq.Keys;
import com.example.cacophony.jooq.tables.Channel.ChannelPath;
import com.example.cacophony.jooq.tables.Chat.ChatPath;
import com.example.cacophony.jooq.tables.ConversationType.ConversationTypePath;
import com.example.cacophony.jooq.tables.Message.MessagePath;
import com.example.cacophony.jooq.tables.UserConversation.UserConversationPath;
import com.example.cacophony.jooq.tables.records.ConversationRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Conversation extends TableImpl<ConversationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>cacophony.conversation</code>
     */
    public static final Conversation CONVERSATION = new Conversation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ConversationRecord> getRecordType() {
        return ConversationRecord.class;
    }

    /**
     * The column <code>cacophony.conversation.id</code>.
     */
    public final TableField<ConversationRecord, UUID> ID = createField(DSL.name("id"),
            SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)),
            this, "");

    /**
     * The column <code>cacophony.conversation.type</code>.
     */
    public final TableField<ConversationRecord, String> TYPE = createField(DSL.name("type"),
            SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>cacophony.conversation.created_at</code>.
     */
    public final TableField<ConversationRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"),
            SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false)
                    .defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)),
            this, "");

    /**
     * The column <code>cacophony.conversation.updated_at</code>.
     */
    public final TableField<ConversationRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"),
            SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false)
                    .defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)),
            this, "");

    private Conversation(Name alias, Table<ConversationRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Conversation(Name alias, Table<ConversationRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>cacophony.conversation</code> table reference
     */
    public Conversation(String alias) {
        this(DSL.name(alias), CONVERSATION);
    }

    /**
     * Create an aliased <code>cacophony.conversation</code> table reference
     */
    public Conversation(Name alias) {
        this(alias, CONVERSATION);
    }

    /**
     * Create a <code>cacophony.conversation</code> table reference
     */
    public Conversation() {
        this(DSL.name("conversation"), null);
    }

    public <O extends Record> Conversation(Table<O> path, ForeignKey<O, ConversationRecord> childPath,
            InverseForeignKey<O, ConversationRecord> parentPath) {
        super(path, childPath, parentPath, CONVERSATION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ConversationPath extends Conversation implements Path<ConversationRecord> {

        private static final long serialVersionUID = 1L;

        public <O extends Record> ConversationPath(Table<O> path, ForeignKey<O, ConversationRecord> childPath,
                InverseForeignKey<O, ConversationRecord> parentPath) {
            super(path, childPath, parentPath);
        }

        private ConversationPath(Name alias, Table<ConversationRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ConversationPath as(String alias) {
            return new ConversationPath(DSL.name(alias), this);
        }

        @Override
        public ConversationPath as(Name alias) {
            return new ConversationPath(alias, this);
        }

        @Override
        public ConversationPath as(Table<?> alias) {
            return new ConversationPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Cacophony.CACOPHONY;
    }

    @Override
    public UniqueKey<ConversationRecord> getPrimaryKey() {
        return Keys.CONVERSATION_PKEY;
    }

    @Override
    public List<ForeignKey<ConversationRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CONVERSATION__FK_CONVERSATION_TYPE);
    }

    private transient ConversationTypePath _conversationType;

    /**
     * Get the implicit join path to the <code>cacophony.conversation_type</code> table.
     */
    public ConversationTypePath conversationType() {
        if (_conversationType == null)
            _conversationType = new ConversationTypePath(this, Keys.CONVERSATION__FK_CONVERSATION_TYPE, null);

        return _conversationType;
    }

    private transient ChannelPath _channel;

    /**
     * Get the implicit to-many join path to the <code>cacophony.channel</code> table
     */
    public ChannelPath channel() {
        if (_channel == null)
            _channel = new ChannelPath(this, null, Keys.CHANNEL__FK_CHANNEL_CONVERSATION.getInverseKey());

        return _channel;
    }

    private transient ChatPath _chat;

    /**
     * Get the implicit to-many join path to the <code>cacophony.chat</code> table
     */
    public ChatPath chat() {
        if (_chat == null)
            _chat = new ChatPath(this, null, Keys.CHAT__FK_CHAT_CONVERSATION.getInverseKey());

        return _chat;
    }

    private transient MessagePath _message;

    /**
     * Get the implicit to-many join path to the <code>cacophony.message</code> table
     */
    public MessagePath message() {
        if (_message == null)
            _message = new MessagePath(this, null, Keys.MESSAGE__FK_MESSAGE_CONVERSATION.getInverseKey());

        return _message;
    }

    private transient UserConversationPath _userConversation;

    /**
     * Get the implicit to-many join path to the <code>cacophony.user_conversation</code> table
     */
    public UserConversationPath userConversation() {
        if (_userConversation == null)
            _userConversation = new UserConversationPath(this, null,
                    Keys.USER_CONVERSATION__FK_USER_CONVERSATION_CONVERSATION.getInverseKey());

        return _userConversation;
    }

    @Override
    public Conversation as(String alias) {
        return new Conversation(DSL.name(alias), this);
    }

    @Override
    public Conversation as(Name alias) {
        return new Conversation(alias, this);
    }

    @Override
    public Conversation as(Table<?> alias) {
        return new Conversation(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Conversation rename(String name) {
        return new Conversation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Conversation rename(Name name) {
        return new Conversation(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Conversation rename(Table<?> name) {
        return new Conversation(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Conversation where(Condition condition) {
        return new Conversation(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Conversation where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Conversation where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Conversation where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Conversation where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Conversation where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Conversation where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Conversation where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Conversation whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Conversation whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
