/*
 * This file is generated by jOOQ.
 */
package com.example.cacophony.jooq.tables;

import com.example.cacophony.jooq.Cacophony;
import com.example.cacophony.jooq.Indexes;
import com.example.cacophony.jooq.Keys;
import com.example.cacophony.jooq.tables.CUser.CUserPath;
import com.example.cacophony.jooq.tables.Conversation.ConversationPath;
import com.example.cacophony.jooq.tables.records.UserConversationRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class UserConversation extends TableImpl<UserConversationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>cacophony.user_conversation</code>
     */
    public static final UserConversation USER_CONVERSATION = new UserConversation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserConversationRecord> getRecordType() {
        return UserConversationRecord.class;
    }

    /**
     * The column <code>cacophony.user_conversation.user_id</code>.
     */
    public final TableField<UserConversationRecord, UUID> USER_ID = createField(DSL.name("user_id"),
            SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>cacophony.user_conversation.channel_id</code>.
     */
    public final TableField<UserConversationRecord, UUID> CHANNEL_ID = createField(DSL.name("channel_id"),
            SQLDataType.UUID.nullable(false), this, "");

    private UserConversation(Name alias, Table<UserConversationRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private UserConversation(Name alias, Table<UserConversationRecord> aliased, Field<?>[] parameters,
            Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>cacophony.user_conversation</code> table reference
     */
    public UserConversation(String alias) {
        this(DSL.name(alias), USER_CONVERSATION);
    }

    /**
     * Create an aliased <code>cacophony.user_conversation</code> table reference
     */
    public UserConversation(Name alias) {
        this(alias, USER_CONVERSATION);
    }

    /**
     * Create a <code>cacophony.user_conversation</code> table reference
     */
    public UserConversation() {
        this(DSL.name("user_conversation"), null);
    }

    public <O extends Record> UserConversation(Table<O> path, ForeignKey<O, UserConversationRecord> childPath,
            InverseForeignKey<O, UserConversationRecord> parentPath) {
        super(path, childPath, parentPath, USER_CONVERSATION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class UserConversationPath extends UserConversation implements Path<UserConversationRecord> {

        private static final long serialVersionUID = 1L;

        public <O extends Record> UserConversationPath(Table<O> path, ForeignKey<O, UserConversationRecord> childPath,
                InverseForeignKey<O, UserConversationRecord> parentPath) {
            super(path, childPath, parentPath);
        }

        private UserConversationPath(Name alias, Table<UserConversationRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public UserConversationPath as(String alias) {
            return new UserConversationPath(DSL.name(alias), this);
        }

        @Override
        public UserConversationPath as(Name alias) {
            return new UserConversationPath(alias, this);
        }

        @Override
        public UserConversationPath as(Table<?> alias) {
            return new UserConversationPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Cacophony.CACOPHONY;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_USER_CONVERSATION_CHANNEL_ID, Indexes.IDX_USER_CONVERSATION_USER_ID);
    }

    @Override
    public List<ForeignKey<UserConversationRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USER_CONVERSATION__FK_USER_CONVERSATION_C_USER,
                Keys.USER_CONVERSATION__FK_USER_CONVERSATION_CONVERSATION);
    }

    private transient CUserPath _cUser;

    /**
     * Get the implicit join path to the <code>cacophony.c_user</code> table.
     */
    public CUserPath cUser() {
        if (_cUser == null)
            _cUser = new CUserPath(this, Keys.USER_CONVERSATION__FK_USER_CONVERSATION_C_USER, null);

        return _cUser;
    }

    private transient ConversationPath _conversation;

    /**
     * Get the implicit join path to the <code>cacophony.conversation</code> table.
     */
    public ConversationPath conversation() {
        if (_conversation == null)
            _conversation = new ConversationPath(this, Keys.USER_CONVERSATION__FK_USER_CONVERSATION_CONVERSATION, null);

        return _conversation;
    }

    @Override
    public UserConversation as(String alias) {
        return new UserConversation(DSL.name(alias), this);
    }

    @Override
    public UserConversation as(Name alias) {
        return new UserConversation(alias, this);
    }

    @Override
    public UserConversation as(Table<?> alias) {
        return new UserConversation(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserConversation rename(String name) {
        return new UserConversation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserConversation rename(Name name) {
        return new UserConversation(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserConversation rename(Table<?> name) {
        return new UserConversation(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserConversation where(Condition condition) {
        return new UserConversation(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserConversation where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserConversation where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserConversation where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserConversation where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserConversation where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserConversation where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserConversation where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserConversation whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserConversation whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
