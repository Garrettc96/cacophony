/*
 * This file is generated by jOOQ.
 */
package com.example.cacophony.jooq.tables;

import com.example.cacophony.jooq.Cacophony;
import com.example.cacophony.jooq.Keys;
import com.example.cacophony.jooq.tables.ChannelVisibility.ChannelVisibilityPath;
import com.example.cacophony.jooq.tables.Conversation.ConversationPath;
import com.example.cacophony.jooq.tables.records.ChannelRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Channel extends TableImpl<ChannelRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>cacophony.channel</code>
     */
    public static final Channel CHANNEL = new Channel();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ChannelRecord> getRecordType() {
        return ChannelRecord.class;
    }

    /**
     * The column <code>cacophony.channel.id</code>.
     */
    public final TableField<ChannelRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false),
            this, "");

    /**
     * The column <code>cacophony.channel.name</code>.
     */
    public final TableField<ChannelRecord, String> NAME = createField(DSL.name("name"),
            SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>cacophony.channel.description</code>.
     */
    public final TableField<ChannelRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB,
            this, "");

    /**
     * The column <code>cacophony.channel.visibility</code>.
     */
    public final TableField<ChannelRecord, String> VISIBILITY = createField(DSL.name("visibility"),
            SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>cacophony.channel.created_at</code>.
     */
    public final TableField<ChannelRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"),
            SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false)
                    .defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)),
            this, "");

    /**
     * The column <code>cacophony.channel.updated_at</code>.
     */
    public final TableField<ChannelRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"),
            SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false)
                    .defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)),
            this, "");

    private Channel(Name alias, Table<ChannelRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Channel(Name alias, Table<ChannelRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>cacophony.channel</code> table reference
     */
    public Channel(String alias) {
        this(DSL.name(alias), CHANNEL);
    }

    /**
     * Create an aliased <code>cacophony.channel</code> table reference
     */
    public Channel(Name alias) {
        this(alias, CHANNEL);
    }

    /**
     * Create a <code>cacophony.channel</code> table reference
     */
    public Channel() {
        this(DSL.name("channel"), null);
    }

    public <O extends Record> Channel(Table<O> path, ForeignKey<O, ChannelRecord> childPath,
            InverseForeignKey<O, ChannelRecord> parentPath) {
        super(path, childPath, parentPath, CHANNEL);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ChannelPath extends Channel implements Path<ChannelRecord> {

        private static final long serialVersionUID = 1L;

        public <O extends Record> ChannelPath(Table<O> path, ForeignKey<O, ChannelRecord> childPath,
                InverseForeignKey<O, ChannelRecord> parentPath) {
            super(path, childPath, parentPath);
        }

        private ChannelPath(Name alias, Table<ChannelRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ChannelPath as(String alias) {
            return new ChannelPath(DSL.name(alias), this);
        }

        @Override
        public ChannelPath as(Name alias) {
            return new ChannelPath(alias, this);
        }

        @Override
        public ChannelPath as(Table<?> alias) {
            return new ChannelPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Cacophony.CACOPHONY;
    }

    @Override
    public UniqueKey<ChannelRecord> getPrimaryKey() {
        return Keys.CHANNEL_PKEY;
    }

    @Override
    public List<ForeignKey<ChannelRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CHANNEL__FK_CHANNEL_CONVERSATION, Keys.CHANNEL__FK_CHANNEL_VISIBILITY);
    }

    private transient ConversationPath _conversation;

    /**
     * Get the implicit join path to the <code>cacophony.conversation</code> table.
     */
    public ConversationPath conversation() {
        if (_conversation == null)
            _conversation = new ConversationPath(this, Keys.CHANNEL__FK_CHANNEL_CONVERSATION, null);

        return _conversation;
    }

    private transient ChannelVisibilityPath _channelVisibility;

    /**
     * Get the implicit join path to the <code>cacophony.channel_visibility</code> table.
     */
    public ChannelVisibilityPath channelVisibility() {
        if (_channelVisibility == null)
            _channelVisibility = new ChannelVisibilityPath(this, Keys.CHANNEL__FK_CHANNEL_VISIBILITY, null);

        return _channelVisibility;
    }

    @Override
    public Channel as(String alias) {
        return new Channel(DSL.name(alias), this);
    }

    @Override
    public Channel as(Name alias) {
        return new Channel(alias, this);
    }

    @Override
    public Channel as(Table<?> alias) {
        return new Channel(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Channel rename(String name) {
        return new Channel(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Channel rename(Name name) {
        return new Channel(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Channel rename(Table<?> name) {
        return new Channel(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Channel where(Condition condition) {
        return new Channel(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Channel where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Channel where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Channel where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Channel where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Channel where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Channel where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Channel where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Channel whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Channel whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
