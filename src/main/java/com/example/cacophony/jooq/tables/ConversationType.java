/*
 * This file is generated by jOOQ.
 */
package com.example.cacophony.jooq.tables;

import com.example.cacophony.jooq.Cacophony;
import com.example.cacophony.jooq.Keys;
import com.example.cacophony.jooq.tables.Conversation.ConversationPath;
import com.example.cacophony.jooq.tables.records.ConversationTypeRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ConversationType extends TableImpl<ConversationTypeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>cacophony.conversation_type</code>
     */
    public static final ConversationType CONVERSATION_TYPE = new ConversationType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ConversationTypeRecord> getRecordType() {
        return ConversationTypeRecord.class;
    }

    /**
     * The column <code>cacophony.conversation_type.type</code>.
     */
    public final TableField<ConversationTypeRecord, String> TYPE = createField(DSL.name("type"),
            SQLDataType.VARCHAR(50).nullable(false), this, "");

    private ConversationType(Name alias, Table<ConversationTypeRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ConversationType(Name alias, Table<ConversationTypeRecord> aliased, Field<?>[] parameters,
            Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>cacophony.conversation_type</code> table reference
     */
    public ConversationType(String alias) {
        this(DSL.name(alias), CONVERSATION_TYPE);
    }

    /**
     * Create an aliased <code>cacophony.conversation_type</code> table reference
     */
    public ConversationType(Name alias) {
        this(alias, CONVERSATION_TYPE);
    }

    /**
     * Create a <code>cacophony.conversation_type</code> table reference
     */
    public ConversationType() {
        this(DSL.name("conversation_type"), null);
    }

    public <O extends Record> ConversationType(Table<O> path, ForeignKey<O, ConversationTypeRecord> childPath,
            InverseForeignKey<O, ConversationTypeRecord> parentPath) {
        super(path, childPath, parentPath, CONVERSATION_TYPE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ConversationTypePath extends ConversationType implements Path<ConversationTypeRecord> {

        private static final long serialVersionUID = 1L;

        public <O extends Record> ConversationTypePath(Table<O> path, ForeignKey<O, ConversationTypeRecord> childPath,
                InverseForeignKey<O, ConversationTypeRecord> parentPath) {
            super(path, childPath, parentPath);
        }

        private ConversationTypePath(Name alias, Table<ConversationTypeRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ConversationTypePath as(String alias) {
            return new ConversationTypePath(DSL.name(alias), this);
        }

        @Override
        public ConversationTypePath as(Name alias) {
            return new ConversationTypePath(alias, this);
        }

        @Override
        public ConversationTypePath as(Table<?> alias) {
            return new ConversationTypePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Cacophony.CACOPHONY;
    }

    @Override
    public UniqueKey<ConversationTypeRecord> getPrimaryKey() {
        return Keys.CONVERSATION_TYPE_PKEY;
    }

    private transient ConversationPath _conversation;

    /**
     * Get the implicit to-many join path to the <code>cacophony.conversation</code> table
     */
    public ConversationPath conversation() {
        if (_conversation == null)
            _conversation = new ConversationPath(this, null, Keys.CONVERSATION__FK_CONVERSATION_TYPE.getInverseKey());

        return _conversation;
    }

    @Override
    public ConversationType as(String alias) {
        return new ConversationType(DSL.name(alias), this);
    }

    @Override
    public ConversationType as(Name alias) {
        return new ConversationType(alias, this);
    }

    @Override
    public ConversationType as(Table<?> alias) {
        return new ConversationType(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ConversationType rename(String name) {
        return new ConversationType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ConversationType rename(Name name) {
        return new ConversationType(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ConversationType rename(Table<?> name) {
        return new ConversationType(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ConversationType where(Condition condition) {
        return new ConversationType(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ConversationType where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ConversationType where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ConversationType where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ConversationType where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ConversationType where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ConversationType where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ConversationType where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ConversationType whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ConversationType whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
